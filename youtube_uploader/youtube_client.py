from __future__ import annotations

import logging
from pathlib import Path
from typing import Optional

from config.config import settings
from pipeline.interfaces import Uploader
from pipeline.models import VideoItem as BaseVideoItem

logger = logging.getLogger(__name__)


class VideoItem(BaseVideoItem):
    pass


class YouTubeUploader(Uploader):
    """MVP uploader: logs intended upload, writes metadata file; real upload optional later."""

    def __init__(self, title: Optional[str] = None, description: Optional[str] = None, tags: Optional[list[str]] = None,
                 category_id: str = "27", privacy_status: str = "unlisted"):
        self.title = title
        self.description = description
        self.tags = tags or ["bible", "podcast", "christian", "scripture"]
        self.category_id = category_id
        self.privacy_status = privacy_status

    def run(self, item: VideoItem) -> VideoItem:
        video_path = item.path
        out_dir = video_path.parent

        # Compose basic metadata from context if available
        title = self.title or f"Bible Podcaster â€” {video_path.parent.name}"
        description = self.description or "Auto-generated by Bible Podcaster."

        # MVP: save metadata next to video, no live upload unless credentials are present
        meta_path = out_dir / "youtube_metadata.txt"
        meta = [
            f"title: {title}",
            f"description: {description}",
            f"tags: {', '.join(self.tags)}",
            f"categoryId: {self.category_id}",
            f"privacyStatus: {self.privacy_status}",
        ]
        meta_path.write_text("\n".join(meta), encoding="utf-8")

        logger.info(f"Prepared YouTube upload metadata at {meta_path}. Skipping actual upload in MVP.")

        # TODO: Implement real YouTube upload when OAuth credentials are provided
        return item


